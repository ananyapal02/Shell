WEEK 1


List the names of the users logged in and their total count without displaying the further details

  $who -q
  #users=0

Find out your terminals device name

  $tty

Find out the current date in the form dd/mm/yyyy

  $date +%d/%m/%y

Find out the machines name and the version of the OS

  uname -ns

Clear the screen and place the cursor at row 12,column 35

  $clear
  $tput cup 12 25

Find the decimal equivalent of  1101001

  $be
  ibate = 2
  1101001

Find out the users who are idling

  $who -HU
  NAME LINE TIME IDLE PI COMMENT

Use man to get help

  $man tty

Ensure that be displays the results of all divisions using three decimal places

  $bc
  scale = 3
  8/3
  2.666





WEEK 2


Create a directory structure in your home directory (cse,two sub directories cprogs and projects under cse)while being in your home directory


  $mkdir cse
  $cd cse
  $mkdir cprogs
  $mkdir projects


Change to the directory projects

  $cd cse
  $cd projects

Create a file called biodata and store your name,age sex and address in it

  $cat > biodata.txt
  Name:Raman Raghav
  Age:45
  Sex:Male
  Address:Dharavi,Mumbai
  [ctrl+D to save and exit]


Move the file text from cprogs to projects
  
  $mv text.txt/cse/projects

Combine the contents of the file bio data and text into another file data text

  $cat biodata.txt  text.txt > datatext.txt

Rename the file text to newtext

  $mv text.txt newtext.txt

Change the permissions of the file newtext to rw-rw-rw

  $chmod 666

List all the file names starting with ,'a'or 'b' or 'm'

  $find . -typef -exec grap-l "a","b","m"{}\

List all filenames that ends with a digit 

  $find/-typef -name '*[!0-9][0-9].txt'

List all the file  whole second character is digit

  $ls -d --?[0-9]*

Use Commands to create a directory in your own home directory called KeepOut whose contents can only be read by tou


  $cf..
  $mkdir Keppout
  $chmod 400 KeepOut





WEEK 3

1a--List all files beginning with character 'a' on the screen and also store them in a file called file 1
ans- $ ls[a]*|tee file1

1b--sort the output of who and display on screen along with total number of users.The same output 
    except the number of users should be sorted in file file1
ans- $who -q/sort;who -hv|cat>>file1

1c--Double sapce a file
ans- $pr -d file1

1d--select lines 5 to 10 of a file
ans- $had -10 file1 /tail -n -5

1e-- find the user name and group id from the file/etc/passwd using the cut command
ans- $cut -d ":" -f 1,4 |etc /passwd

1f-- Extract the names of the user from etc/passwd after ignoring the first 10 entries
ans- $cut -d":" -f 1/etc/passwd/tail -n +11

1g-- sort file/etc/passwd on GUID(primary) and UID(secondary) so that users with the same GUID are placed together. 
      User with a lower UID should be placed higher in the list.
ans- $cut -d":" -f 3,4/etc/passwd/sort -n

1h-- list from/etc/passwd the UID and the user having the highest UID
ans- $ sort -t ":" -r-n-k 3/etc/passwd|
     cut -d ":" -f 1,3|head-1

1i-- Denie a sequence which lists the fine largest files in the cut=rrent directory
ans- $ls-15/head -6

1j-- Remove duplicate lines from a file
and- $uniq file 1

1K-- Count the freq of occurences of words in a file
ans- $sort file1/uniq -c

1l-- Find"long" listing of the smallest 5 files in the /etc directory whose name 
     contains the string "conf:, sorted b y increasing file size
ans- $ls -lsr/etc/*.conf/head-5

1m- What would you tyoe at the command line to get a sorted list,with no duplicates, of all the users logged into the local network
ans- $ who/uniq/sort

1n- What would you type at the command line to find out how many total lines are contained in all the files
    ending in .c in the current directory, printing only the total number of lines
ans- $ wc-1*.c






WEEK 4




1a-- Find out the PID of your login shell
ans- $PS

1b-- Remove the header line from the PS output
ans- $PS__ no.header

1c-- List all the process that you are currently running on your machine, sorted by the command name in alphabetical order
     The output should consist of the process you are running and nothing else
ans- $PS -r/sort

1d-- Display the files in the current directory that contain the string CSEUEMK in either upper or lower case.
ans- $grep -li 'CSEUEMK'

1e-- Store in a variable the number of lines containing the word CSE in the files CSE1,CSE2,CSE3.
ans- $var= 'grep CSE CSE[1-3] |wc -l'
            $echo $var 	

1f-- If you did not have the we command, how would you use grep to count the number of user currently using the system.
ans- who|grep -c ".*"

1g-- Remove blank lines from a file using grep
ans- grep -v "^$" aa1

1h-- List the ordinary files in your current directory that are not writable by the owner 
ans- $ls -l|grep -v '^..w'

1i-- Locate lines ending and begining with a dot and containing anything between them.
ans- $grep '^\..*\.$' CSE4

1j-- Locate lines that are less than 100 charecters in length
ans- grep '^.\<0,99\}$' *file1







WEEK 5




# EVEN OR ODD
clear 
echo "---- EVEN OR ODD IN SHELL SCRIPT -----"
echo -n "Enter a number:"
read n
echo -n "RESULT: "
if [ `expr $n % 2` == 0 ]
then
	echo "$n is even"
else
	echo "$n is Odd"
fi



# LEAP YEAR OR NOT
echo -n "Enter year (YYYY): "
read y
a = 'expr $y%4'
b = 'expr $y%100'
c = 'expr $y%400'
if[$a -eq 0 -a $b -ne - -o $c -eq 0]
then 
echo "$y is leap year"
else
echo "$y is not a leap year"

fi




# GREATEST OF 3 NUMBERS
echo "Enter Num1"
read num1
echo "Enter Num2"
read num2
echo "Enter Num3"
read num3

if [ $num1 -gt $num2 ] && [ $num1 -gt $num3 ]
then
    echo $num1
elif [ $num2 -gt $num1 ] && [ $num2 -gt $num3 ]
then
    echo $num2
else
    echo $num3
fi




#GENERATE ALL COMBOS OF 1, 2, 3.
#!/bin/bash
clear
for i in 1 2 3
do
for j in 1 2 3
do
for k in 1 2 3
do
echo $i $j $k
done
done
done





WEEK 6


# REVERSE OF A NUMBER
echo enter n
read n
num=0
while [ $n -gt 0 ]
do
num=$(expr $num \* 10)
k=$(expr $n % 10)
num=$(expr $num + $k)
n=$(expr $n / 10)
done
echo number is $num




# DIVISIBLE BY 11
echo "Enter any Number"
read n
r=`expr $y % 11`
if [ $r -eq 0 ]first post
then
echo $r " is divisible by 11"
else
echo $r " is not divisible by 11"

fi



# ADDITION SUBSTRACTION MULTIPLICATION DIVISION
# !/bin/bash
# Take user Input
echo "Enter Two numbers : "
read a
read b
echo "Enter Choice :"
echo "1. Addition"
echo "2. Subtraction"
echo "3. Multiplication"
echo "4. Division"
read ch
case $ch in
1)res=`echo $a + $b | bc`;;
2)res=`echo $a - $b | bc`;;
3)res=`echo $a \* $b | bc`;;
4)res=`echo "scale=2; $a / $b" | bc`;;
esac
echo "Result : $res"







WEEK 7




list of all files in the current directort to which you have read,wr8 & execute permissions:
#!/bin/sh
for var in *
do
if test -r $ var -a -w $var -a -x $ var -a! -d $ var
then
ls $var
fi done



list files by modification time when called with /m & by acess time when called with la.By default script
should show listing of all files in the current directory
#!/bin/sh
case $1 in
lm) ls-lt ;;
la) ls-lut;;
*) ls-l;;
esa c


files created or updated within fourteen days from current date:
#!/bin/sh
find -atime -14 -mtime -14 | sort -u
#end of script


files with all attributes those have been created or modified in  the month of November.
#!/bin/sh
for var in *
do
set -- 'ls -l $var ' if test "$6"_"Nov"
then
ls -l $var
fi
done





WEEK 8



Report names & sizes of all files in a directory whose exceeds 100 bytes.
the filenames should be printed in decreasing order of their size.The total no. of such files should 
be reported:

#!/bin/sh
if test $ # -ni
then
echo "Please give a directory name and try again"
exit
fi
cd $1 find - size +100b|sort -nr
echo "Total number os such files:"
find -Size + 100b|grep-C "*"




Names of all the non-directory files in current directory and calculate sum of six of them

dir | awk ' total +=$4};
END (print total)
ls-l;;


list name of files under current directory that starts with a vowel

echo "Required files are:"
ls| grep " ^[aeiou]"



Receives 2 filename as argument and checks whether th e 2 files contents are same or not.
If same then the second file should be deleted.

if test $#_ne 2
then 
echo "Please give two filenames"
exit
fi
comp -S $1 $2
if test $} -eq 0
then echo "$1 and $2 are same"
rm $2
else 
echo "$1 and $2 are not same"
fi





WEEK 9




Write a shell script which deletes all lines containing the word UNIX in the files supplied as arguments to
this shell script.

#! /bin/sh
#Purpose: To delete the lines containing the word UNIX in the file supplied.
#USAGE: sh unixdelete.sh filename(s)
If test S# -eq 0
then
echo "Please give filenames"
exit
fi
for var is S*
do
grep -v "UNIX" Svar >ff
cp ff Svar
done
#end of script






